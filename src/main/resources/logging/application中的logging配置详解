日志输出的内容主要有：
    1.时间和日期，精确到毫秒。
    2.日志级别：（ERROR, WARN, INFO, DEBUG or TRACE）。
    3.进程的ID.
    4.分隔符 "---" 标识实际日志的开始。
    5.线程名方括号括起来（可能会截断控制台输出）
    6.logger名：通常使用源代码的类名
    7.日志内容。

添加依赖（目前spring boot中默认加了logback日志框架）
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-logging</artifactId>
    </dependency>

控制台输出：
    日志级别：TRACE < DEBUG < INFO < WARN < ERROR < FATAL
    如果设置了日志的级别为warn，则低于warn级别的日志不会输出到控制台
    spring boot默认的日志级别是info,高于此级别的会输出到控制台。

    建议开发者模式开启DEBUG日志级别。

文件输出：
    默认情况下spring boot将日志文件输出到控制台，不会写到日志文件
    如果要编写控制台之外的日志输出文件，则需在application.properties中设置logging.file或logging.path属性。
    logging.file,设置文件，可以是绝对路径，也可以是相对路径。如：logging.file=my.log
    logging.path,设置目录，在/var/log文件夹生成一个日志文件为 spring.log 的文件。

    注：二者不能同时使用，如果同时使用则只有logging.file生效。
        默认情况下，日志文件的大小达到10MB时会切分一次，产生新的日志文件，默认级别为：ERROR、WARN、INFO

    application.yml配置简单的控制台和文件日志输出方式
        logging:
          level:
            #基本的日志输出级别
            root: INFO
            #定义某一个文件的日志输出级别
            com.example.controller.UserController: DEBUG
          #在文件夹生成一个日志文件为 spring.log 的文件。
          path: /Users/jackie/workspace/rome/
          #日志文件名称是springboot.log
          file: springboot.log

级别控制：
    所有支持的日志记录系统都可以在Spring环境中设置记录级别（例如在application.properties中）
    格式为：'logging.level.* = LEVEL'
    logging.level：日志级别控制前缀，*为包名或Logger名
    LEVEL：选项TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF

    举例：
    logging.level.com.dudu=DEBUG：com.dudu包下所有class以DEBUG级别输出
    logging.level.root=WARN：root日志以WARN级别输出

自定义日志配置：
    根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：

    Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy
    Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml
    Log4j2：log4j2-spring.xml, log4j2.xml
    JDK (Java Util Logging)：logging.properties

    spring boot官方推荐优先使用带有 -spring 的文件名作为你的日志配置（如使用logback-spring.xml,而不是logback.xml）
    命名为logback.xml的日志配置文件，spring boot 可以为它多添加一些 spring boot 特有的配置项（此文件下有logback.xml样例文件）

    默认的命名规则，并且放在 src/main/resources 下面即可

    如果你即想完全掌控日志配置，但又不想用logback.xml作为Logback配置的名字，application.yml可以通过logging.config属性指定自定义的名字：
    logging.config=classpath:logging-config.xml

    虽然一般并不需要改变配置文件的名字，但是如果你想针对不同运行时Profile使用不同的日志配置，这个功能会很有用。
    一般不需要这个属性，而是直接在logback-spring.xml中使用springProfile配置，不需要logging.config指定不同环境使用不同配置文件。springProfile配置在下面介绍。

以下是自定义日志的使用规范：

    1.根节点是<configuration>,所包含的属性是：
    scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
    根节点<configuration>有5个子节点

    子节点一 <root>
    root节点为必选节点，是用来指定基础的日志输出级别，只有一个level属性。
    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。
    默认是DEBUG。
    可以包含零个或多个元素，标识这个appender将会添加到这个loger。
        <root level="debug">
          <appender-ref ref="console" />
          <appender-ref ref="file" />
        </root>

    子节点二：<contextName> 设置上下文名称
    每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改,
    可以通过%contextName来打印日志上下文名称，一般来说我们不用这个属性，可有可无。
        <contextName>logback</contextName>

    子节点三：<property> 设置变量
    用来定义变量名的标签，有两个属性，name和value,其中name的值是变量的名称，value的值时变量定义的值。
    通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。
        <property name="logback.logdir" value="/Users/inke/dev/log/tomcat"/>
        <property name="logback.appname" value="app"/>
    这里可以看后通过 application.yml 传递参数过来。

    子节点四：<appender>
    appender用来格式化日志输出节点，有俩个属性name和class，class用来指定哪种输出策略，常用就是控制台输出策略和文件输出策略。
    控制台输出ConsoleAppender：
        实例1：
        <?xml version="1.0" encoding="UTF-8"?>
        <configuration scan="true" scanPeriod="60 seconds" debug="false">

            <contextName>logback-demo</contextName>

            <!--输出到控制台 ConsoleAppender-->
            <appender name="consoleLog1" class="ch.qos.logback.core.ConsoleAppender">
                <!--展示格式 layout-->
                <layout class="ch.qos.logback.classic.PatternLayout">
                    <pattern>%d -1 %msg%n</pattern>
                </layout>
            </appender>

            <!--输出到控制台 ConsoleAppender-->
            <appender name="consoleLog2" class="ch.qos.logback.core.ConsoleAppender">
                <encoder>
                    <pattern>%d -2 %msg%n</pattern>
                </encoder>
            </appender>

            <!--指定最基础的日志输出级别-->
            <root level="INFO">
                <!--appender将会添加到这个loger-->
                <appender-ref ref="consoleLog1"/>
                <appender-ref ref="consoleLog2"/>
            </root>

        </configuration>
    可以看到layout和encoder，都可以将事件转换为格式化后的日志记录，但是控制台输出使用layout，文件输出使用encoder，
    具体原因可以看http://blog.csdn.net/cw_hello1/article/details/51969554
        实例2：
        <?xml version="1.0" encoding="UTF-8"?>
        <configuration scan="true" scanPeriod="60 seconds" debug="false">

            <contextName>logback-demo</contextName>

            <!--输出到控制台 ConsoleAppender-->
            <appender name="consoleLog1" class="ch.qos.logback.core.ConsoleAppender">
                <!--展示格式 layout-->
                <layout class="ch.qos.logback.classic.PatternLayout">
                    <pattern>
                        <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
                    </pattern>
                </layout>
                <!--
                <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                     <level>ERROR</level>
                </filter>
                 -->
            </appender>

            <!--指定最基础的日志输出级别-->
            <root level="INFO">
                <!--appender将会添加到这个loger-->
                <appender-ref ref="consoleLog1"/>
                <appender-ref ref="consoleLog2"/>
            </root>
        </configuration>

    <encoder>表示对日志进行编码：
        %d{HH: mm:ss.SSS}——日志输出时间
        %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
        %-5level——日志级别，并且使用5个字符靠左对齐
        %logger{36}——日志输出者的名字
        %msg——日志消息
        %n——平台的换行符
        ThresholdFilter为系统定义的拦截器，例如我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中。
        如果不用记得注释掉，不然你控制台会发现没日志~

    输出到文件 RollingFileAppender
    另一种常见的日志输出到文件，随着应用的运行时间越来越长，日志也会增长的越来越多，将他们输出到同一个文件并非一个好办法。
    RollingFileAppender用于切分文件日志：
        <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
            所以我们使用下面的策略，可以避免输出 Error 的日志-->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <!--过滤 Error-->
                <level>ERROR</level>
                <!--匹配到就禁止-->
                <onMatch>DENY</onMatch>
                <!--没有匹配到就允许-->
                <onMismatch>ACCEPT</onMismatch>
            </filter>
            <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
                如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
                的日志改名为今天的日期。即，<File> 的日志都是当天的。
            -->
            <File>${logback.logdir}/info.${logback.appname}.log</File>
            <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
                <FileNamePattern>${logback.logdir}/info.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>
                <!--只保留最近90天的日志-->
                <maxHistory>90</maxHistory>
                <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
                <!--<totalSizeCap>1GB</totalSizeCap>-->
            </rollingPolicy>
            <!--日志输出编码格式化-->
            <encoder>
                <charset>UTF-8</charset>
                <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
            </encoder>
        </appender>


        <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>Error</level>
            </filter>
            <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
                如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
                的日志改名为今天的日期。即，<File> 的日志都是当天的。
            -->
            <File>${logback.logdir}/error.${logback.appname}.log</File>
            <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->
            <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->
                <FileNamePattern>${logback.logdir}/error.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>
                <!--只保留最近90天的日志-->
                <maxHistory>90</maxHistory>
                <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->
                <!--<totalSizeCap>1GB</totalSizeCap>-->
            </rollingPolicy>
            <!--日志输出编码格式化-->
            <encoder>
                <charset>UTF-8</charset>
                <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>
            </encoder>
        </appender>
    如果同时有<File>和<FileNamePattern>，根据日期分割日志，代码注释写的很清楚了。
    如果要区分 Info 和 Error 级别的日志，那么需要使用过滤规则的策略，代码注释写的很清楚了。

    子节点五<loger>
    <loger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。

    name:用来指定受此loger约束的某一个包或者具体的某一个类。
    level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
    addtivity:是否向上级loger传递打印信息。默认是true

    loger在实际使用的时候有两种情况
    先来看一看代码中如何使用
        package com.dudu.controller;
        @Controller
        public class LearnController {
            private Logger logger = LoggerFactory.getLogger(this.getClass());

            @RequestMapping(value = "/login",method = RequestMethod.POST)
            @ResponseBody
            public Map<String,Object> login(HttpServletRequest request, HttpServletResponse response){
                //日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出。
                logger.trace("日志输出 trace");
                logger.debug("日志输出 debug");
                logger.info("日志输出 info");
                logger.warn("日志输出 warn");
                logger.error("日志输出 error");
                Map<String,Object> map =new HashMap<String,Object>();
                String userName=request.getParameter("userName");
                String password=request.getParameter("password");
                if(!userName.equals("") && password!=""){
                    User user =new User(userName,password);
                    request.getSession().setAttribute("user",user);
                    map.put("result","1");
                }else{
                    map.put("result","0");
                }
                return map;
            }
        }
    这是一个登录的判断的方法，我们引入日志，并且打印不同级别的日志，然后根据logback-spring.xml中的配置来看看打印了哪几种级别日志。

    第一种：带有loger的配置，不指定级别，不指定appender
    logback-spring.xml增加 loger 配置如下：
         <logger name="com.dudu.controller"/>

    <logger name="com.dudu.controller" />将控制controller包下的所有类的日志的打印，但是并没用设置打印级别，所以继承他的上级的日志级别“info”；
    没有设置addtivity，默认为true，将此loger的打印信息向上级传递；
    没有设置appender，此loger本身不打印任何信息。
    <root level="info">将root的打印级别设置为“info”，指定了名字为“console”的appender。

    当执行com.dudu.controller.LearnController类的login方法时，LearnController 在包com.dudu.controller中，所以首先执行<logger name="com.dudu.controller"/>，将级别为“info”及大于“info”的日志信息传递给root，本身并不打印；
    root接到下级传递的信息，交给已经配置好的名为“console”的appender处理，“console” appender 将信息打印到控制台；

        16:00:17.407 logback [http-nio-8080-exec-8] INFO  com.dudu.controller.LearnController - 日志输出 info
        16:00:17.408 logback [http-nio-8080-exec-8] WARN  com.dudu.controller.LearnController - 日志输出 warn
        16:00:17.408 logback [http-nio-8080-exec-8] ERROR com.dudu.controller.LearnController -

    第二种：带有多个loger的配置，指定级别，指定appender
    logback-spring.xml增加 loger 配置如下：
        <configuration>
            ...

            <!--logback.LogbackDemo：类的全路径 -->
            <logger name="com.dudu.controller.LearnController" level="WARN" additivity="false">
                <appender-ref ref="console"/>
            </logger>
        </configuration>

    控制com.dudu.controller.LearnController类的日志打印，打印级别为“WARN”;
    additivity属性为false，表示此loger的打印信息不再向上级传递;
    指定了名字为“console”的appender;

    这时候执行com.dudu.controller.LearnController类的login方法时，先执行<logger name="com.dudu.controller.LearnController" level="WARN" additivity="false">,将级别为“WARN”及大于“WARN”的日志信息交给此loger指定的名为“console”的appender处理，在控制台中打出日志，不再向上级root传递打印信息

       16:00:17.408 logback [http-nio-8080-exec-8] WARN  com.dudu.controller.LearnController - 日志输出 warn
       16:00:17.408 logback [http-nio-8080-exec-8] ERROR com.dudu.controller.LearnController - 日志输出 error

    当然如果你把additivity="false"改成additivity="true"的话，就会打印两次，因为打印信息向上级传递，logger本身打印一次，root接到后又打印一次。

    注意：
        <configuration>
            ...

            <logger name="com.example.demo.controller" level="WARN" additivity="false">
               <appender-ref ref="consoleLog"/>
            </logger>

            <logger name="com.example.demo.controller"/>

            <logger name="com.example.demo"/>
        </configuration>
    范围有重叠的话，范围小的，有效。

    多环境日志输出
        <configuration>
            ...

            <!-- 测试环境+开发环境. 多个使用逗号隔开. -->
            <springProfile name="test,dev">
                <logger name="com.example.demo.controller" level="DEBUG" additivity="false">
                    <appender-ref ref="consoleLog"/>
                </logger>
            </springProfile>

            <!-- 生产环境. -->
            <springProfile name="prod">
                <logger name="com.example.demo.controller" level="INFO" additivity="false">
                    <appender-ref ref="consoleLog"/>
                </logger>
            </springProfile>
        </configuration>

    application.yml增加环境选择的配置active: dev

        server:
          port: 9010

        spring:
          profiles:
            active: dev
          datasource:
            url: jdbc:mysql://localhost:3306/test?characterEncoding=utf8
            username: root
            password: root

        mybatis:
            type-aliases-package: org.larry.springboot.entity
            mybatis-locations: classpath:mybatis/**/*.xml
            check-config-location: true
    active: 【test、dev、prod】，根据 active 的环境，自动采用上面配置的springProfile的 logger 日志

    自定义日志文件路径（application.yml)
    application.yml增加日志相关自定义配置
        logback:
          logdir: /Users/inke/dev/log/tomcat/sell
          appname: sell

    在logback-spring.xml
        <?xml version="1.0" encoding="UTF-8"?>
        <configuration scan="true" scanPeriod="60 seconds" debug="false">

            <!--application.yml 传递参数，不能使用logback 自带的<property>标签 -->
            <springProperty scope="context" name="appname" source="logback.appname"/>
            <springProperty scope="context" name="logdir" source="logback.logdir"/>

            <contextName>${appname}</contextName>

            <!--输出到控制台 ConsoleAppender-->
            <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">
                <!--展示格式 layout-->
                <layout class="ch.qos.logback.classic.PatternLayout">
                    <pattern>
                        <pattern>%d{HH:mm:ss.SSS} %contextName [%thread] %-5level %logger{36} - %msg%n</pattern>
                    </pattern>
                </layout>
            </appender>

